// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO uaccount (first_name, last_name, email, password)
VALUES ($1, $2, $3, $4)
RETURNING id, first_name, last_name, email, password, ts
`

type CreateUserParams struct {
	FirstName string         `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
	Email     string         `json:"email"`
	Password  string         `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Uaccount, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var i Uaccount
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Ts,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM uaccount
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, email, password, ts FROM uaccount
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (Uaccount, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i Uaccount
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Ts,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, first_name, last_name, email, password, ts FROM uaccount
WHERE email = $1
LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (Uaccount, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i Uaccount
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Password,
		&i.Ts,
	)
	return i, err
}

const updateEmail = `-- name: UpdateEmail :exec
UPDATE uaccount
SET email = $2
WHERE id = $1
`

type UpdateEmailParams struct {
	ID    int64  `json:"id"`
	Email string `json:"email"`
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateEmail, arg.ID, arg.Email)
	return err
}

const updateFirstName = `-- name: UpdateFirstName :exec
UPDATE uaccount
SET first_name = $2
WHERE id = $1
`

type UpdateFirstNameParams struct {
	ID        int64  `json:"id"`
	FirstName string `json:"first_name"`
}

func (q *Queries) UpdateFirstName(ctx context.Context, arg UpdateFirstNameParams) error {
	_, err := q.db.ExecContext(ctx, updateFirstName, arg.ID, arg.FirstName)
	return err
}

const updateLastName = `-- name: UpdateLastName :exec
UPDATE uaccount
SET last_name = $2
WHERE id = $1
`

type UpdateLastNameParams struct {
	ID       int64          `json:"id"`
	LastName sql.NullString `json:"last_name"`
}

func (q *Queries) UpdateLastName(ctx context.Context, arg UpdateLastNameParams) error {
	_, err := q.db.ExecContext(ctx, updateLastName, arg.ID, arg.LastName)
	return err
}

const updatePassword = `-- name: UpdatePassword :exec
UPDATE uaccount
SET password = $2
WHERE id = $1
`

type UpdatePasswordParams struct {
	ID       int64  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) error {
	_, err := q.db.ExecContext(ctx, updatePassword, arg.ID, arg.Password)
	return err
}
